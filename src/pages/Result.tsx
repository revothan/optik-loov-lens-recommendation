import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { generateRecommendation, QuizAnswer, LensRecommendation } from '@/logic/lensLogic'

// Components
import LoadingScreen from '@/components/result/LoadingScreen'
import ErrorScreen from '@/components/result/ErrorScreen'
import AnimatedBackground from '@/components/result/AnimatedBackground'
import ResultHeader from '@/components/result/ResultHeader'
import SuccessAnimation from '@/components/result/SuccessAnimation'
import RecommendationCard from '@/components/result/RecommendationCard'
import ActionButtons from '@/components/result/ActionButtons'

export default function Result() {
  const navigate = useNavigate()
  const [recommendations, setRecommendations] = useState<LensRecommendation[]>([])
  const [loading, setLoading] = useState(true)
  const [animationStep, setAnimationStep] = useState(0)
  const [error, setError] = useState<string | null>(null)

  const processingMessages = [
    'Initializing AI Engine...',
    'Analyzing your responses...',
    'Processing neural networks...',
    'Matching optimal lenses...',
    'Generating recommendations...'
  ]

  useEffect(() => {
    // Simulate AI processing with steps
    let step = 0
    const interval = setInterval(() => {
      if (step < processingMessages.length) {
        setAnimationStep(step)
        step++
      } else {
        clearInterval(interval)
        
        try {
          // Get answers from localStorage
          const savedAnswers = localStorage.getItem('quiz-answers')
          if (savedAnswers) {
            const answers: QuizAnswer[] = JSON.parse(savedAnswers)
            const recs = generateRecommendation(answers)
            setRecommendations(recs)
          } else {
            setError('Quiz data not found. Please retake the quiz.')
          }
        } catch (err) {
          setError('Error processing your quiz data. Please try again.')
          console.error('Error generating recommendations:', err)
        }
        setLoading(false)
      }
    }, 800)

    return () => clearInterval(interval)
  }, [])

  const handleNewQuiz = () => {
    localStorage.removeItem('quiz-answers')
    navigate('/quiz')
  }

  const handleHome = () => {
    navigate('/')
  }

  const handleShare = async () => {
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'My AI-Powered Lens Recommendations - Optik LOOV',
          text: 'Check out my personalized lens recommendations from Optik LOOV AI!',
          url: window.location.href
        })
      } else {
        await navigator.clipboard.writeText(window.location.href)
        showToast('üéâ Link copied to clipboard!')
      }
    } catch (err) {
      console.error('Error sharing:', err)
      showToast('‚ùå Failed to share. Please try again.')
    }
  }

  const showToast = (message: string) => {
    const toast = document.createElement('div')
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-0'
    toast.textContent = message
    document.body.appendChild(toast)
    
    // Animate in
    setTimeout(() => toast.classList.add('translate-x-0'), 100)
    
    // Remove after 3 seconds
    setTimeout(() => {
      toast.classList.add('translate-x-full', 'opacity-0')
      setTimeout(() => document.body.removeChild(toast), 300)
    }, 3000)
  }

  const handleDownload = () => {
    try {
      const content = `
ü§ñ AI-POWERED LENS RECOMMENDATIONS - OPTIK LOOV
===============================================

${recommendations.map((rec, index) => 
`${index + 1}. ${rec.emoji} ${rec.type} (${rec.category.toUpperCase()})
   Brand: ${rec.brand}
   Price: ${rec.price}
   
   Description: ${rec.description}
   
   Key Features:
   ${rec.features.map(f => `   ‚û§ ${f}`).join('\n')}
   
   Why recommended:
   ${rec.reasons.map(r => `   ‚úì ${r}`).join('\n')}
   
`).join('\n')}

Generated by Optik LOOV AI Engine
Visit us at optikloov.com for professional fitting
      `.trim()
      
      const blob = new Blob([content], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = 'optik-loov-ai-recommendations.txt'
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      showToast('üìÑ Recommendations downloaded!')
    } catch (err) {
      console.error('Error downloading:', err)
      showToast('‚ùå Failed to download. Please try again.')
    }
  }

  if (loading) {
    return (
      <LoadingScreen 
        animationStep={animationStep} 
        processingMessages={processingMessages} 
      />
    )
  }

  if (error || recommendations.length === 0) {
    return <ErrorScreen error={error} />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-blue-50 to-purple-50 relative overflow-hidden">
      <AnimatedBackground />

      <ResultHeader 
        onHome={handleHome}
        onShare={handleShare}
        onDownload={handleDownload}
      />

      <SuccessAnimation />

      {/* Recommendations */}
      <main className="container mx-auto px-4 pb-20">
        <div className="max-w-5xl mx-auto">
          <div className="grid gap-8 mb-12">
            {recommendations.map((rec, index) => (
              <RecommendationCard 
                key={index}
                recommendation={rec}
                index={index}
              />
            ))}
          </div>

          <ActionButtons 
            onNewQuiz={handleNewQuiz}
            onHome={handleHome}
          />
        </div>
      </main>

      {/* Add custom CSS */}
      <style jsx>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  )
}
